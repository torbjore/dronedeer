---
title: "Results"
date: last-modified
number-sections: true
toc: true
toc-depth: 4
format:
  html:
    embed-resources: true
---

```{r}
#| echo: false
library(coda)
```


## Checking convergence and WAIC models

```{r}
#| echo: false

# WAIC can be used even when we have different observation models: https://discourse.mc-stan.org/t/can-waic-looic-be-used-to-compare-models-with-different-likelihoods/7380

Path <- "../data/posterior_samples"
files <- dir(path = Path)
files <- files[substring(files, 1, 3) != "pos"]
for(fil in files){
  cat("\n **", fil, "**\n")
  load(paste0("../data/posterior_samples/", fil))
  print(unlist(settings))
  print(gelman.diag(out$samples))
  print(out$WAIC)
}
```

The upper CI of the 'potential scale reduction factor' by Gelman and Rubin is a bit high for some models, so we should probably either run these models longer or do something to get better mixing.

Assuming that this convergence issue will not affect the WIAC-ranking of the models, the best model is 'gamma_2' (this model has pretty good convergence criteria, but we can run for longer to get even better).

## Posterior predictive checks of best model

### Bayesian p-value based on Y

```{r}
#| echo: false
samp <- as.matrix(out$samples)
plot(samp[,"Disc_New_Y"] ~ samp[,"Disc_Y"])
abline(0, 1, col="red")
mean(samp[, "Disc_New_Y"] > samp[, "Disc_Y"])
```

### Bayesian p-value based on y

```{r}
#| echo: false

plot(samp[,"Disc_New_y"] ~ samp[,"Disc_y"])
abline(0, 1, col="red")
mean(samp[, "Disc_New_y"] > samp[, "Disc_y"])
```

### Conclusion

No indication of serious lack of fit.

## Summary of best model

```{r}
#| echo: false
load("../data/posterior_samples/gamma_2.RData") # Best model
summary(out$samples)
```

## Predictions from the best model

```{r}
#| echo: false
#| warning: FALSE

library(ggplot2)
library(hrbrthemes) 
library(cowplot)

source("pred_plot_functions.r")

#############
# Preparing #
#############

load(file = "../data/UseData.rda")
load(file = "../data/Counts.rda")

sam_names <- c("Haugen (April)", "Haugen (March)", "Raa (April)", "Raa (March)", "Soere Bjoerkum (April)", "Soere Bjoerkum (March)", "Sprakehaug (April)", "Sprakehaug (March)")

predictor_variable <- UseData$mean_field_dist
Xlab <- "Distance from field (m)"
Ylab <- expression(Density~of~deer~(km^-2))

post_samp_mat <- as.matrix(out$samples)

X <- seq(0, max(predictor_variable, na.rm = TRUE), length.out=50)
X_mean <-  mean(predictor_variable, na.rm=TRUE)
X_sd <- sd(predictor_variable, na.rm=TRUE)
X_st <- (X - X_mean)/X_sd

mpv <- mean(predictor_variable, na.rm = TRUE) # mean predictor variable
pap <- median(-post_samp_mat[,"beta[1]"]/(2*post_samp_mat[,"beta[2]"]))*X_sd + X_mean # predictor variable at peak

############
# Plotting #
############

plots <- pred_plots()

plot_grid(plots[[2]],
          plots[[1]],
          plots[[4]],
          plots[[3]])
plot_grid(plots[[6]],
          plots[[5]],
          plots[[8]],
          plots[[7]])
```

* Mean distance from the field (stippled line): `r round(mpv, 0)` meters.
* Posterior median of distance at peak deer density (dotted line): `r round(pap, 0)` meters.

<!-- Posterior summary for distance at peak deer density: -->

<!-- ```{r} -->
<!-- #| echo: FALSE -->

<!-- quantile(-post_samp_mat[,"beta[1]"]/(2*post_samp_mat[,"beta[2]"]), probs = c(0.025, 0.5, 0.975))*X_sd + X_mean -->

<!-- ``` -->

Predictions at peak deer density (for table A3):

* Kommentar: Jeg har her brukt samme rekkefølge som i figuren (den rekkefølgen i du har på plottene i manus), men table A3 har en annen rekkefølge. Jeg synes du skal bruke samme rekkefølge i figur og tabell. Kanskje du også skal forenkle å bare ta med posterior median, 2.5 percentil og 97.5 percentil - det er det jeg har gjort i plottet nå.

```{r}
#| echo: FALSE

df <- data.frame(SAM = sam_names, x = pap)
pap_st <- (pap - X_mean)/X_sd
for(SAM in 1:length(sam_names)){
  y <- pred(pap_st, PS = post_samp_mat, SAM)
  Q <- quantile(y, probs = c(0.025, 0.5, 0.975))
  df$mean[SAM] <- mean(y)
  df$median[SAM] <- Q[2]
  df$lwr[SAM] <- Q[1]
  df$upr[SAM] <- Q[3]
}

print(df[c(2,1,4,3,6,5,8,7), ])

```

